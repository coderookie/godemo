package main

import (
	"fmt"
)

func isValid(s string) (bool, bool) {
	if len(s) % 2 != 0 {
		return false, true
	}
	if string(s[0]) == ")" {
		return false, false
	}
	if string(s[len(s) - 1]) == "(" {
		return false, true
	}

	m := map[string]string{
		")": "(",
	}

	ret := make([]string, 0)
	for _, b := range s {
		st := string(b)
		if len(ret) > 0 && m[st] == ret[len(ret) - 1] {
			ret = ret[:len(ret) - 1]
		} else {
			ret = append(ret, st)
		}
	}

	if len(ret) == 0 {
		return true, true
	} else if len(ret) == 1 && ret[0] == ")" {
		return false, false
	} else {
		return false, true
	}
}

func longestValidParentheses(s string) int {
	if len(s) == 0 || len(s) == 1 {
		return 0
	}

	m := map[string]string{
		")": "(",
	}

	ret := ""
	for i := 0; i < len(s); i++ {
		for j := i + 1; j < len(s); j++ {
			if m[string(s[j])] != string(s[i]) {
				continue
			}
			re1, re2 := isValid(s[i:j + 1])
			if !re2 {
				break
			}
			if re1  && len(ret) < len(s[i:j + 1]) {
				ret = s[i:j + 1]
			}
		}
	}

	return len(ret)
}

func main() {
	// s := ")()())"
	s := "())((()()(()(((()())))))))((((((())()(()()(())()))(()))(()()())((((((()())()()()(()))())(((()(()(())(()((()())())))((()(((()(()((()())())))(())))()))))))))))())()))((())()()()()))((()))(((()))()(()))()((()()()(()))(((()()()()((()()(()())))(())))))))()))))()))()((()())())(()))(((()()()((())())())(((())((()))(())(())()))))(())))()())())()(()))))(())))(())))(()((())(())))((()(()))((((()))))()((()()()())()(())(()(()()())()((())(()((()()()())()))((()))))()))())))))))()((()()))()()()()))(()()()()(())()(()))))()(((((()(((((((()(((())()))(()())()(()))(()(()((()((((()))))()(())(()))))()(()(((((((()))((()(()(()))(()())(()())()(())()(()((((()))))()()()(((())()())()))())()(())))(()()))))(())))))((((()))))(((((()))((((()))((())))))((())))())((((((((()(()((())))()))()()))))))))(((()(()())(()))((())((())(()))))))))((())()()())(()(())()))))((())())(()(())((()())))))((())((())())()(()))(())()()()((((()(()()))()(()(((((()())())())))())()))()))(()())()((()()()()((())()())(((())(((()(()()(((((((()(((()((((()(()((())))())())(())()(()())()((())()()()))()(()())()))()())))()()())))()(((((()()))(())(((()())))(())(())())(())(()()())))()())()))(()))))(()())()(()))((((())()())(())(((()())(()((((((((()))((((())())()((()()())())()()()())()()((()())(()()))((()()))()))(((()((()()(()))()(())()())((())())()(((())))(())((()((())(()()()(()(()))((()((((()(()()(())(()()))))(())()(()()))))())()((())(()))()()(()()()((()))(()))))())((()(()(("
	ret := longestValidParentheses(s)
	fmt.Println(ret)
}
